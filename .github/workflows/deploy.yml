# GitHub Actions Workflow for FTP Deployment to websupport.sk
# File location: .github/workflows/deploy.yml

name: üöÄ Deploy to WebSupport FTP

# Trigger deployment on push to main branch
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment trigger

# Security: Define environment variables
env:
  FTP_LOCAL_DIR: './'      # Deploy from root directory (for direct HTML/CSS/JS files)
  FTP_REMOTE_DIR: '/palacebar.sk/web'  # WebSupport hosting directory

jobs:
  deploy:
    name: üåê Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository code
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better deployment tracking
      
      # Step 2: Setup Node.js environment (if you're using Node.js)
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Step 3: Install dependencies
      - name: üì¶ Install Dependencies
        run: |
          echo "Installing project dependencies..."
          npm ci --prefer-offline --no-audit
      
      # Step 4: Build the project (customize based on your build process)
      - name: üî® Build Project
        run: |
          echo "Building project for production..."
          npm run build
          
          # Verify build output exists
          if [ ! -d "${{ env.FTP_LOCAL_DIR }}" ]; then
            echo "‚ùå Build directory not found: ${{ env.FTP_LOCAL_DIR }}"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"
          echo "Build contents:"
          ls -la ${{ env.FTP_LOCAL_DIR }}
      
      # Step 2: Verify frontend files exist
      - name: üìÅ Verify Frontend Files
        run: |
          echo "Checking for frontend files..."
          echo "Repository contents:"
          ls -la ${{ env.FTP_LOCAL_DIR }}
          
          # Check for common frontend files
          if [ -f "index.html" ]; then
            echo "‚úÖ index.html found"
          else
            echo "‚ö†Ô∏è No index.html found in root"
          fi
          
          if find . -name "*.css" | grep -q .; then
            echo "‚úÖ CSS files found"
          fi
          
          if find . -name "*.js" | grep -q .; then
            echo "‚úÖ JavaScript files found"
          fi
      # Step 3: Security scan for frontend files
      - name: üîç Security Scan
        run: |
          echo "Performing basic security checks..."
          
          # Check for sensitive files that shouldn't be deployed
          if find ${{ env.FTP_LOCAL_DIR }} -name "*.env*" -o -name "*.key" -o -name "*.pem" | grep -q .; then
            echo "‚ö†Ô∏è Warning: Sensitive files found in build directory"
            find ${{ env.FTP_LOCAL_DIR }} -name "*.env*" -o -name "*.key" -o -name "*.pem"
          else
            echo "‚úÖ No sensitive files detected"
          fi
      
      # Step 4: Deploy to FTP server
      - name: üöÄ Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          # FTP server connection details (stored as repository secrets)
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          
          # Deployment configuration
          local-dir: ${{ env.FTP_LOCAL_DIR }}/
          server-dir: ${{ env.FTP_REMOTE_DIR }}/
          
          # Security and performance settings
          protocol: ftp
          state-name: .ftp-deploy-sync-state.json
          dry-run: false
          
          # File handling - optimized for frontend files
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/.env*
            **/*.log
            **/README.md
            **/.github/**
            **/package*.json
            **/yarn.lock
            **/*.md
            **/LICENSE
            **/.gitignore
            **/.vscode/**
            **/.idea/**
          
          # Deployment options
          log-level: verbose
          security: strict
          timeout: 60000
      
      # Step 5: Post-deployment verification
      - name: ‚úÖ Verify Deployment
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìä Deployment Summary:"
          echo "  ‚Ä¢ Repository: ${{ github.repository }}"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Deployed to: ${{ secrets.FTP_HOST }}"
          echo "  ‚Ä¢ Timestamp: $(date)"
      
      # Step 8: Notify on failure (optional)
      - name: üö® Deployment Failed
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs above for error details."
          echo "Common issues:"
          echo "  ‚Ä¢ FTP credentials are incorrect"
          echo "  ‚Ä¢ Build process failed"
          echo "  ‚Ä¢ Network connectivity issues"
          echo "  ‚Ä¢ File permission problems"

# Optional: Add deployment status notifications
  notify:
    name: üìß Send Notifications
    runs-on: ubuntu-latest
    needs: deploy
    if: always() # Run even if deployment fails
    
    steps:
      - name: üì¨ Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful - Website is live!"
          else
            echo "‚ùå Deployment failed - Please check logs"
          fi
